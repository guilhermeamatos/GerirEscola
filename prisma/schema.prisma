// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id          String       @id @default(uuid())
  name        String
  address     String
  nivel       nivel
  phone       String
  email       String
  classes     Class[]
  manager     Manager[]
  teachers    Teacher[]     @relation("TeacherSchool")
  students    Student[]
}

enum nivel {
  INFANTIL
  FUNDAMENTAL_1
  FUNDAMENTAL_2
  FUNDAMENTAL_1_2
  INFANTIL_FUNDAMENTAL_1
  INFANTIL_FUNDAMENTAL_1_2
}

model Class {
  id          String       @id @default(uuid())
  name        String
  nivel       nivelClass
  numberOfStudents Int
  school_year Int
  school_id   String
  teachers    TeacherClass[]
  school      School      @relation(fields: [school_id], references: [id])
  students    Student[]
  subjects    Subject[]
}
model Subject {
  id          String       @id @default(uuid())
  teacher_id  String?
  teacher     Teacher?    @relation(fields: [teacher_id], references: [id])
  class_id    String?
  class       Class?      @relation(fields: [class_id], references: [id])
  name        nameSubjects
  enrollments    Enrollment[]
}

model Enrollment {
  id           String    @id @default(uuid())
  student_id   String
  subject_id   String
  grade        Float?    
  attendance   Float?  
  student      Student  @relation(fields: [student_id], references: [id])
  subject      Subject  @relation(fields: [subject_id], references: [id])

  @@unique([student_id, subject_id]) 
}


enum nameSubjects{
  LINGUA_PORTUGUESA
  MATEMATICA
  CIENCIAS
  HISTORIA
  GEOGRAFIA
  ARTE
  EDUCACAO_FISICA
  ENSINO_RELIGIOSO
  INGLES
}

enum nivelClass {
  INFANTIL
  FUNDAMENTAL_1
  FUNDAMENTAL_2
}
model TeacherClass {
  id          String       @id @default(uuid())
  teacher_id  String
  teacher    Teacher     @relation(fields: [teacher_id], references: [id])
  class_id    String
  class       Class      @relation(fields: [class_id], references: [id])
}

model Teacher {
  id            String      @id @default(uuid())
  matricula     String?      @unique
  concursado    Boolean 
  name          String
  cpf           String      @unique
  address       String
  phone         String
  email         String      @unique
  password      String?
  subjects      Subject[]
  classes       TeacherClass[]
  specialization String
  schools       School[]     @relation("TeacherSchool")
}



model Student {
  id             String      @id @default(uuid())
  name           String
  matricula      String?      @unique
  birthdate      DateTime
  cpf            String?      @unique
  address        String?
  phone          String?
  email          String?
  school_year    Int
  password       String?
  class_id       String?
  class          Class?       @relation(fields: [class_id], references: [id])
  school_id      String
  school         School       @relation(fields: [school_id], references: [id])
  enrollments    Enrollment[]
}

model Coordinator {
  id         String      @id @default(uuid())
  name       String
  cpf        String      @unique
  address    String
  phone      String
  email      String      @unique
  password   String?
}

model Manager {
  id         String      @id @default(uuid())
  name       String
  cpf        String      @unique
  phone      String
  email      String      @unique
  password   String?
  school_id  String    
  school     School      @relation(fields: [school_id], references: [id])
}